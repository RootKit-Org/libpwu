.IX Title "IFACE 3
.TH IFACE 3 "Oct 2024" "liblain v1.0.2" "iface"
.\" Automatically generated by Pandoc 3.1.2
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.hy
.SS LIBRARY
.PP
Lain memory manipulation library (liblain, -llain)
.SS SYNOPSIS
.IP
.nf
\f[C]
#define LN_IFACE_LAINKO 0
#define LN_IFACE_PROCFS 1


struct _ln_session {

    union {
        struct {
            int fd_mem;
            int pid;
        }; //procfs_data
        struct {
            char major;
            int fd_dev_memu;
        }; //lainko_data
    };

    ln_iface iface;

}; 
typedef struct _ln_session ln_session;

int ln_open(ln_session * session, const int iface, const pid_t pid);
int ln_close(ln_session * session);
int ln_update_map(const ln_session * session, ln_vm_map * vm_map);
int ln_read(const ln_session * session, const uintptr_t addr, 
            cm_byte * buf, const size_t buf_sz);
int ln_write(const ln_session * session, const uintptr_t addr,
             const cm_byte * buf, const size_t buf_sz);
\f[R]
.fi
.SS STRUCTURE
.PP
\f[B]liblain\f[R] provides 2 interfaces for operating on targets:
\f[I]procfs\f[R] and \f[I]lainko\f[R].
The \f[I]procfs\f[R] interface uses Linux\[cq]s inbuilt \f[I]/proc\f[R]
pseudo-filesystem for accessing the target.
The \f[I]lainko\f[R] interface uses the \f[B]lain.ko kernel module\f[R]
provided separately from this library.
Both interfaces provide identical functionality.
If your target does not employ any countermeasures, it is easier to
stick with the \f[I]procfs\f[R] interface.
.PP
To operate on a target it must first be opened.
The \f[I]ln_session\f[R] structure stores data relevant to a single open
target.
If you desire to operate on multiple targets at the same time, you must
open multiple sessions.
You can have multiple sessions utilising the same interface, and
multiple sessions utilising different interfaces.
.PP
A session does not include a memory map.
You are free to maintain multiple memory maps associated with a single
session.
.SS FUNCTIONS
.PP
The \f[B]ln_open()\f[R] function opens a \f[I]session\f[R] on a target
with the specified \f[I]pid\f[R].
The interface to use should be specified with the \f[I]iface\f[R]
argument and should take the value of \f[I]LN_IFACE_LAINKO\f[R] or
\f[I]LN_IFACE_PROCFS\f[R].
.PP
The \f[B]ln_close()\f[R] function closes an opened \f[I]session\f[R].
.PP
The \f[B]ln_update_map()\f[R] function updates the passed memory map
\f[I]vm_map\f[R].
This function can be called both to populate a map for the first time,
and to update it.
.PP
The \f[B]ln_read()\f[R] function reads \f[I]buf_sz\f[R] bytes at address
\f[I]addr\f[R] into a buffer pointed to by \f[I]buf\f[R],
.PP
The \f[B]ln_write()\f[R] function writes \f[I]buf_sz\f[R] bytes at
address \f[I]addr\f[R] from a buffer pointed to by \f[I]buf\f[R].
.SS RETURN VALUES
.PP
\f[B]ln_open()\f[R], \f[B]ln_close()\f[R], \f[B]ln_update_map()\f[R],
\f[B]ln_read()\f[R], and \f[B]ln_write()\f[R] functions return 0 on
success and -1 on error.
.PP
On error, \f[I]ln_errno\f[R] is set.
See \f[B]liblain_error\f[R](3).
.SS EXAMPLES
.PP
See \f[I]src/test/iface.c\f[R] for examples.
.SS SEE ALSO
.PP
\f[B]liblain_error\f[R](3), \f[B]liblain_map\f[R](3),
\f[B]liblain_util\f[R](3)
