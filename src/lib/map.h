#ifndef MAP_H
#define MAP_H

#include "liblain.h"
#include "lainko.h"


/*
 * initialise this struct manually on the first call to 
 * send_map_node() for a map generated by a memory interface.
 *
 * send_map_node() will automatically update it for use by 
 * all subsequent calls.
 */
typedef struct {

    cm_list_node * next_area; //ln_vm_area
    int next_area_index;

    cm_list_node * prev_obj;  //ln_vm_obj
    int prev_obj_index;

} _traverse_state;


//internal
int _map_send_entry(ln_vm_map * vm_map, 
                   _traverse_state * state, const struct vm_entry * entry);
void _map_init_traverse_state(const ln_vm_map * vm_map, _traverse_state * state);


//external
void ln_new_vm_map(ln_vm_map * vm_map);
int ln_del_vm_map(ln_vm_map * vm_map);
int ln_map_clean_unmapped(ln_vm_map * vm_map);


#endif
