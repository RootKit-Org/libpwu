.IX Title "GET_REGION_BY_ADDR 3
.TH GET_REGION_BY_ADDR 3 "June 2023" "libpwu 1.0" "get_region_by_addr"
.\" Automatically generated by Pandoc 3.1.2
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.hy
.SS get_region_by_addr()
.IP
.nf
\f[C]
int get_region_by_addr(void * addr, maps_entry ** matched_region,
                       unsigned * int offset, int * obj_index, maps_data * m_data);
\f[R]
.fi
.SS description
.PP
\f[V]get_region_by_addr()\f[R] takes an address and returns the segment
and offset into the segment at which this address resides in the callee.
It also takes an optional pointer \f[V]obj_index\f[R], which if not NULL
contains on return the `index' into the corresponding backing file.
For example, libc may contain 4 segments.
If the address is found in the second segment of libc,
\f[V]obj_index\f[R] will be set to 1 on return.
.SS parameters
.IP \[bu] 2
\f[V]*addr\f[R] : address to query.
.IP \[bu] 2
\f[V]**matched_region\f[R] : pointer to a segment pointer in
\f[V]m_data\f[R], filled by the call.
.IP \[bu] 2
\f[V]*offset\f[R] : offset into the \f[V]matched_region\f[R] segment
where \f[V]addr\f[R] occurs.
.IP \[bu] 2
\f[V]*obj_index\f[R] : `index' into the backing file.
.IP \[bu] 2
\f[V]*m_data\f[R] : pointer to a \f[V]maps_data\f[R] structure for the
target process.
.SS return value
.PP
\f[V]0\f[R] on success, \f[V]-1\f[R] on no segment found, \f[V]-2\f[R]
on fail.
